#!/usr/bin/env python3

import os
import sys
import json
import argparse

from functions import *


# parse arguments from the cli. Only for testing/advanced use. All other parameters are handled by cli_input.py
def process_args():
    parser = argparse.ArgumentParser()
    # parser.add_argument('-l', '--local-path', dest="local_path",
    #                     help="Use local files, instead of downloading from the internet (not recommended).")
    parser.add_argument("-v", "--verbose", action="store_true", dest="verbose", default=True,
                        help="Print more output")
    return parser.parse_args()


def avs_audio(platform):
    print_status("Installing AVS")
    # TODO: add support for avs
    print_error("avs audio is not implemented yet!")


def apl_audio():
    # TODO: add a selection to use either sof or avs
    avs_audio("apl")


def sof_audio(platform, username):
    print_status("Installing SOF")
    # Install required packages
    install_package("sof-firmware", "firmware-sof-signed", "alsa-sof-firmware")
    install_package("linux-firmware", "linux-firmware", "linux-firmware")
    install_package("pulseaudio", "pulseaudio", "pulseaudio")

    # Copy config files
    cpfile(f"{config_path}/audio/sof/alsa-reload.service", "/etc/systemd/system/alsa-reload.service")
    cpfile(f"{config_path}/audio/sof/alsa-sof.conf", "/etc/modprobe.d/alsa-sof.conf")
    cpfile(f"{config_path}/audio/sof/asound.conf", "/etc/asound.conf")
    cpfile(f"{config_path}/audio/sof/default.pa", "/etc/pulse/default.pa")
    cpfile(f"{config_path}/audio/sof/pulseaudio.service", "/usr/lib/systemd/user/pulseaudio.service")

    bash("systemctl daemon-reload")  # Reload systemd configs
    bash("systemctl enable alsa-reload")  # enable custom service

    # Run a few systemctl commands as a regular user
    # TODO: Integrate the services.sh into this script
    bash(f"su - {username} -s {config_path}/audio/sof/services.sh")


def str_audio():
    print_status("Installing STR")
    print_error("str audio not implemented yet")


def zen2_audio():
    with open("/tmp/audio/pactl","r") as file:
        pactl=file.read()  # pactl must run as not root
    if not ("PipeWire" in pactl):
        with open("/etc/eupnea.json","r") as conf:
            distro = json.load(conf)["distro_name"]
        match distro: # Remove pulseaudio in ubuntu <= 22.04
            case "ubuntu":
                # https://ubuntuhandbook.org/index.php/2022/04/pipewire-replace-pulseaudio-ubuntu-2204/
                bash("apt-get install pipewire-audio-client-libraries libspa-0.2-bluetooth libspa-0.2-jack -y")
                bash("apt-get install wireplumber pipewire-media-session- -y")
                cpfile(
                    "/usr/share/doc/pipewire/examples/alsa.conf.d/99-pipewire-default.conf /etc/alsa/conf.d/99-pipewire-default.conf")
                cpfile(
                    "/usr/share/doc/pipewire/examples/ld.so.conf.d/pipewire-jack-x86_64-linux-gnu.conf /etc/ld.so.conf.d/pipewire-jack-x86_64-linux-gnu.conf")
                bash("ldconfig")  # auto-create links
                bash("apt-get remove pulseaudio-module-bluetooth -y")
                # TODO: auto run command as root
                print_question("Please execute this command : " + "systemctl --user --now enable wireplumber.service")
                input("Press enter after you executed the command")
            case "arch":
                pass
            case "fedora":
                pass
            case _:
                print_error(f"Something went REALLY WRONG : cannot install AMD audio => Open github issue <= ")
                exit(1)

    # Prepare
    bash("git clone https://github.com/alsa-project/alsa-ucm-conf/ /tmp/audio")

    # Copy
    alsaucm = "/usr/share/alsa/ucm2"
    mkdir(f"{alsaucm}/AMD/acp3xalc5682m98/", True)
    cpfile("/tmp/audio/ucm2/AMD/acp3xalc5682m98/HiFi.conf", f"{alsaucm}/AMD/acp3xalc5682m98/HiFi.conf")
    cpfile("/tmp/audio/ucm2/AMD/acp3xalc5682m98/acp3xalc5682m98.conf",
           f"{alsaucm}/AMD/acp3xalc5682m98/acp3xalc5682m98.conf")
    mkdir(f"{alsaucm}/conf.d/acp3xalc5682m98", True)
    bash(f"cd {alsaucm}/conf.d/acp3xalc5682m98 ; ln ../../AMD/acp3xalc5682m98/acp3xalc5682m98.conf")


def install_package(arch_package, deb_package, rpm_package):
    if Path("/usr/bin/pacman").exists():
        os.system(f"pacman -S --noconfirm {arch_package}")
    elif Path("/usr/bin/apt").exists():
        os.system(f"apt install -y {deb_package}")
    elif Path("/usr/bin/dnf").exists():
        os.system(f"dnf install -y {rpm_package}")
    else:
        print_error(f"Unknown package manager! Please install {deb_package} using your package manager.")
        exit(1)


if __name__ == "__main__":
    if os.geteuid() == 0 and not path_exists("/tmp/username"):
        print_error("Please start the script as non-root/without sudo")
        exit(1)

    args = process_args()  # process args before elevating to root for better ux
    # TODO: install universal dependencies before elevating to root

    # Restart script as root
    if not os.geteuid() == 0:
        mkdir("/tmp/audio")
        with open("/tmp/audio/pactl","w") as file:
            file.write(bash("pactl info"))  # pactl must run as not root
        # save username
        with open("/tmp/username", "w") as file:
            file.write(bash("whoami").strip())  # get non root username. os.getlogin() seems to fail in chroots
        sudo_args = ['sudo', sys.executable] + sys.argv + [os.environ]
        os.execlpe('sudo', *sudo_args)

    # read username
    with open("/tmp/username", "r") as file:
        user_id = file.read()

    if args.verbose:
        print_warning("Verbosity increased")
        set_verbose(args.verbose)

    # Important message
    print_warning("WARNING: this audio script is not fully functional yet!")

    # Determine if running from a git clone or a eupnea system
    if path_exists("/etc/eupnea"):
        config_path = "/etc/eupnea"
    else:
        config_path = "configs"

    # Get the board name from dmi
    with open("/sys/devices/virtual/dmi/id/product_name", "r") as dmi:
        device_board = dmi.read().lower().strip()

    with open(f"{config_path}/audio/board-generations.json", "r") as file:
        boards = json.load(file)

    try:
        match boards[device_board]:
            case "skl":
                avs_audio("skl")
            case "kbl":
                avs_audio("skl")
            case "apl":
                apl_audio()
            case "glk":
                sof_audio("glk", user_id)
            case "whl":
                sof_audio("whl", user_id)
            case "cml":
                sof_audio("cml", user_id)
            case "jsl":
                sof_audio("jsl", user_id)
            case "tgl":
                sof_audio("tgl", user_id)
            case "str":
                str_audio()
            case "zen2":
                zen2_audio()
            case _:
                print_error(f"Unknown/Unsupported chromebook model: {device_board}")
                exit(1)
    except KeyError:
        print_error(f"Unknown/Unsupported chromebook model: {device_board}")
        exit(1)

    print_header("Audio installed successfully! Reboot to enable audio.")
    input("\033[92m" + "Press ENTER to reboot or CTRL+C to cancel reboot" + "\033[0m")
    bash("reboot")
    sleep(5)
